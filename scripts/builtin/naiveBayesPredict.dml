#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# Implements scoring with a naive Bayes model learnt using
# naive-bayes.dml
#
# hadoop jar SystemDS.jar -f naive-bayes-predict.dml -nvargs X=data Y=labels prior=model_file1 conditionals=model_file2 probabilities=probabilities accuracy=accuracy confusion=confusion fmt="text"
#
m_naiveBayesPredict = function(Matrix[Double] D, Matrix[Double] prior, Matrix[Double] conditionals, Matrix[Double] C, Boolean verbose=FALSE)
return (Matrix[Double] probs, Matrix[Double] labels, Double acc)
{

  min_feature_val = min(D)
  if(min_feature_val < 0)
    stop("Stopping due to invalid argument: Multinomial naive Bayes is meant for count-based feature values, minimum value in X is negative")

  numRows = nrow(D)
  dimensions = as.scalar(prior[nrow(prior),1])

  log_probs = D %*% t(log(conditionals)) + t(log(prior));

  mx = rowMaxs(log_probs)
  ones = matrix(1, rows=1, cols=nrow(prior))
  probs = log_probs - mx %*% ones
  probs = exp(probs)/(rowSums(exp(probs)) %*% ones)


	if(min(C) < 1)
		stop("Stopping due to invalid argument: Label vector (Y) must be recoded")
	
	labels = rowIndexMax(log_probs)
	acc = sum(labels == C) / numRows * 100

  if(verbose) {
    acc_str = "Accuracy (%): " + acc
    print(acc_str)
    num_classes = nrow(prior)
    num_classes_ground_truth = max(C)
    if(num_classes < num_classes_ground_truth)
      num_classes = num_classes_ground_truth
    confusion_mat = table(labels, C, num_classes, num_classes)  
    conf_str = "Confusion Matrix: \n"
    print(acc_str+toString(confusion_mat))
  }
  print("predictions")
  print(toString(labels))
  print("GT")
  print(toString(C))
      acc_str = "Accuracy (%): " + acc
    print(acc_str)
}