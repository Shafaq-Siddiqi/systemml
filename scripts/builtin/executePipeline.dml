#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

s_executePipeline = function(Frame[String] pipeline, Matrix[Double] X,  Matrix[Double] Y, Matrix[Double] mask,
  Frame[Unknown] schema, List[Unknown] hyperParameters, Boolean verbose)
  return (Matrix[Double] X, Matrix[Double] Y)
{
  if(verbose) {
    print("checks   rows in X = "+nrow(X)+" rows in Y = "+nrow(Y)+" cols in X = "+ncol(X)+" col in Y = "+ncol(Y))
    print("pipeline in execution "+toString(pipeline))
    print("pipeline hps "+toString(hyperParameters))
    print("mask "+toString(mask))
    print("col max"+toString(colMaxs(X)))
    while(FALSE){}
  }
  for(i in 1:ncol(pipeline)) {
    op = as.scalar(pipeline[1,i])   
    [hp, withClass] = matrixToList(X, Y, mask, as.matrix(hyperParameters[i]), op)
    X = eval(op, hp)
    if(withClass)
    {
      Y = X[, ncol(X)]
      X = X[, 1:ncol(X) - 1]
    }
    while(FALSE){}
    X = confirmMeta(X, schema, op)
  }
}

# This function will convert the matrix row-vector into list
matrixToList = function(Matrix[Double] X,  Matrix[Double] Y, Matrix[Double] mask, Matrix[Double] p, String op)
  return (List[Unknown] l, Boolean withClass)
{
  withClass = FALSE
  l = list()
  l = append(l, X)
  if(sum(p) != -1) {
    if(op  == "mice")
      l = append(l, mask)
    if(op == "pca") {
      ratio = as.scalar(p[1,1]) * ncol(X)
      p[1, 1] = as.integer(ncol(X) - ratio)
      p[1, 2] = ifelse(as.scalar(p[1,2]) > 0.5, 1, 0)
    }
    if(as.scalar(p[, ncol(p)]) == 1) {
      l = append(l, Y)
      withClass = TRUE
    }
    for(i in 1:ncol(p)-1)
      l = append(l, as.scalar(p[1,i]))
    l = append(l, FALSE) #verbose parameter value
  } 
   # print(toString(l))
}

confirmMeta = function(Matrix[Double] X, Frame[Unknown] schema, string op)
return (Matrix[Double] X)
{
  if(op == "imputByMean" | op == "winsorize" | op == "imputeByMedian")
    X = as.matrix(dropInvalidType(as.frame(X), schema))
}